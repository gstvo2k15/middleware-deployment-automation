
<LocationMatch "/wp-login.php">
    Require all denied
    Require ip 172.17.0.0/16
</LocationMatch>

<LocationMatch "/xmlrpc.php">
    Require all denied
    Require ip 172.17.0.0/16
</LocationMatch>

### ./config/extra/hardening.conf ###

Timeout 60
TraceEnable off
ServerSignature Off
ServerTokens Prod
FileETag None
LimitRequestBody 102400

### ./config/extra/logging.conf ###

LogFormat "%h %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-Agent}i\"" combined
CustomLog "/usr/local/apache2/logs/access.log" combined
ErrorLog "/usr/local/apache2/logs/error.log"
LogLevel warn

### ./config/extra/modsecurity.conf ###

# Activate ModSecurity
SecRuleEngine On

# Include CRS rules
IncludeOptional /etc/modsecurity/*.conf
IncludeOptional /usr/share/modsecurity-crs/*.conf

# Basic config
SecRequestBodyAccess On
SecResponseBodyAccess On
SecAuditEngine RelevantOnly
SecAuditLog /usr/local/apache2/logs/modsec_audit.log

# Response body settings
SecResponseBodyAccess On
SecResponseBodyMimeType (application/json|text/html|text/xml)

# Custom error logging
SecDebugLog /var/log/apache2/modsec_debug.log
SecDebugLogLevel 3

### ./config/extra/modsecurity_crs.conf ###

# Create CRS rules
IncludeOptional /usr/local/apache2/conf/crs/rules/*.conf

### ./config/extra/remoteip.conf ###

# RemoteIP conf for Docker
LoadModule remoteip_module modules/mod_remoteip.so

RemoteIPHeader X-Forwarded-For
RemoteIPTrustedProxy 172.17.0.0/16

### ./config/extra/security.conf ###

Header always set X-Frame-Options "DENY"
Header always set X-Content-Type-Options "nosniff"
Header always set X-XSS-Protection "1; mode=block"
Header always set Content-Security-Policy "default-src 'self'; script-src 'self'; object-src 'none'; base-uri 'self';"
Header always set Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"

### ./config/extra/ssl.conf ###

<VirtualHost *:443>
    ServerName apache.local
    DocumentRoot "/usr/local/apache2/htdocs"

    SSLEngine on
    SSLCertificateFile "/usr/local/apache2/conf/ssl/apache.crt"
    SSLCertificateKeyFile "/usr/local/apache2/conf/ssl/apache.key"

    <Directory "/usr/local/apache2/htdocs">
        AllowOverride All
        Require all granted
    </Directory>

    ErrorLog "/usr/local/apache2/logs/error.log"
    CustomLog "/usr/local/apache2/logs/access.log" common
</VirtualHost>

### ./config/httpd.conf ###

ServerRoot "/usr/local/apache2"
ServerName $SERVER_NAME

Listen 80

LoadModule mpm_event_module modules/mod_mpm_event.so
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule rewrite_module modules/mod_rewrite.so
LoadModule headers_module modules/mod_headers.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule authz_host_module modules/mod_authz_host.so
LoadModule security2_module modules/mod_security2.so
LoadModule unixd_module modules/mod_unixd.so
LoadModule unique_id_module modules/mod_unique_id.so


Include conf/extra/security.conf
Include conf/extra/hardening.conf
Include conf/extra/logging.conf
Include conf/extra/fail2ban.conf
Include conf/extra/modsecurity.conf

DocumentRoot "/usr/local/apache2/htdocs"
<Directory "/usr/local/apache2/htdocs">
    Options -Indexes +FollowSymLinks
    AllowOverride All
    Require all granted
</Directory>

# Conditionally enable SSL
<IfDefine ENABLE_SSL>
    Listen 443
    SSLEngine on
    SSLCertificateFile "/etc/apache2/ssl/server.crt"
    SSLCertificateKeyFile "/etc/apache2/ssl/server.key"
    Include conf/extra/ssl.conf
</IfDefine>

### ./config/logrotate.conf ###

/usr/local/apache2/logs/*.log {
    daily
    rotate 7
    missingok
    notifempty
    compress
    delaycompress
    sharedscripts
    postrotate
        /usr/bin/systemctl reload httpd > /dev/null 2>&1 || true
    endscript
}

### ./docker-compose.yml ###

services:
  apache:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: apache2_server
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro
      - ./config/extra/:/usr/local/apache2/conf/extra/:ro
      - ./www:/usr/local/apache2/htdocs
      - ./logs:/usr/local/apache2/logs
    environment:
      TZ: "Europe/Madrid"
      SERVER_NAME: "apache.local"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

### ./Dockerfile ###

FROM httpd:2.4.57-bullseye

# Instalar ModSecurity y Certbot
RUN apt-get update && apt-get install -y \
    libapache2-mod-security2 \
    certbot \
    && rm -rf /var/lib/apt/lists/*

# Copiar el m√≥dulo de seguridad a la ruta de Apache
RUN test -f /usr/lib/apache2/modules/mod_security2.so && \
    cp /usr/lib/apache2/modules/mod_security2.so /usr/local/apache2/modules/ || \
    echo "ERROR: ModSecurity module not found!"

# Crear directorios para logs y certificados
RUN mkdir -p /var/log/apache2 /etc/apache2/ssl && \
    touch /var/log/apache2/modsec_audit.log /var/log/apache2/modsec_debug.log && \
    chmod -R 775 /var/log/apache2 /etc/apache2/ssl

# Cargar ModSecurity en Apache
RUN echo "LoadModule security2_module modules/mod_security2.so" >> /usr/local/apache2/conf/httpd.conf

# Copiar configuraci√≥n de Apache
COPY config/httpd.conf /usr/local/apache2/conf/httpd.conf
COPY config/extra/ /usr/local/apache2/conf/extra/

# Crear directorio para los certificados
RUN mkdir -p /usr/local/apache2/conf/ssl

# Generar certificado SSL autofirmado
RUN openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
    -keyout /usr/local/apache2/conf/ssl/apache.key \
    -out /usr/local/apache2/conf/ssl/apache.crt \
    -subj "/C=US/ST=Denial/L=Springfield/O=Dis/CN=apache.local"

# Configurar Apache para utilizar SSL
RUN echo "SSLCertificateFile /etc/apache2/ssl/apache.crt" >> /usr/local/apache2/conf/extra/ssl.conf && \
    echo "SSLCertificateKeyFile /etc/apache2/ssl/apache.key" >> /usr/local/apache2/conf/extra/ssl.conf

# Configurar VirtualHost para HTTPS
COPY config/ssl.conf /usr/local/apache2/conf/extra/ssl.conf
RUN echo "Include conf/extra/ssl.conf" >> /usr/local/apache2/conf/httpd.conf

EXPOSE 80 443

CMD ["httpd-foreground"]

### ./lista.txt ###


### ./scripts/enable_ssl.sh ###

#!/bin/sh
if [ "$ENABLE_SSL" = "true" ]; then
    echo "üîê SSL is enabled. Checking certificates..."
    if [ ! -f "/etc/apache2/ssl/server.crt" ] || [ ! -f "/etc/apache2/ssl/server.key" ]; then
        echo "‚ö†Ô∏è No SSL certificates found. Generating self-signed certificates..."
        openssl req -x509 -newkey rsa:2048 -keyout /etc/apache2/ssl/server.key -out /etc/apache2/ssl/server.crt -days 365 -nodes -subj "/CN=localhost"
    fi
    echo "‚úÖ SSL setup complete."
else
    echo "‚ö†Ô∏è SSL is disabled. Running Apache in HTTP mode."
fi
